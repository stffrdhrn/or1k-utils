#!/bin/bash

# quick wrapper for openrisc qemu

SCRIPT_PATH=`dirname $0`

QEMU=$HOME/work/openrisc/qemu
BAREBOX=$HOME/work/openrisc/barebox/barebox
OSROOT=$HOME/work/openrisc/or1k-utils

# For regression testing
# LINUX=$HOME/work/openrisc/or1k-linux-4.10
#LINUX=$HOME/work/openrisc/buildroot/output/images/vmlinux
# Jason's wireguard test
#LINUX=$HOME/work/linux/vmlinux-zx2c4-wireguard
#LINUX=$HOME/work/linux/vmlinux-wireguard-minimal

# Latest mainline
LINUX=$HOME/work/linux/vmlinux

INITRD_CPIO=$HOME/work/openrisc/buildroot/output/images/rootfs.cpio
#INITRD_CPIO=$HOME/work/linux/initramfs.cpio.gz
#INITRD_CPIO=$HOME/work/openrisc/or1k-utils/initramfs.cpio.gz

DISK=$HOME/work/qemu-fs-or1k.qcow2

run() {
  echo "exec: $@"
  exec "$@"
}

# image created with
# $QEMU/build/qemu-img create -f qcow2 qemu-snapshot.img 100M
if [ ! -f ${SCRIPT_PATH}/qemu-snapshot.img ] ; then
  $QEMU/build/qemu-img create -f qcow2 ${SCRIPT_PATH}/qemu-snapshot.img 100M
fi

if [ ! -f ${SCRIPT_PATH}/qemu-fs-or1k.qcow2 ] ; then
  $QEMU/build/qemu-img create -o size=8G -f qcow2 qemu-fs-or1k.qcow2
fi

# For taking hibernation like snapshots of QEMU
#DRIVE="-drive file=${SCRIPT_PATH}/qemu-snapshot.img,cache=writeback"

# Debug, add -S to stop on startup
DEBUG="-gdb tcp::10001"

# Qemu Tracing
#TRACE="-D trace.txt -d in_asm,exec,nochain,op_opt,int"
#TRACE="-D trace.txt -d in_asm,int,mmu"
#TRACE="-D trace.txt -d in_asm,int"
#TRACE="-D trace.txt -d int"
#TRACE="-d int,mmu"
#TRACE="-D trace.txt -d int,exec,nochain"
#TRACE="-D trace.txt -d int,exec,cpu,nochain -dfilter 0xc0005000..0xc0006000,0xc0009000..0xc0010000"
#TRACE="-trace open_eth_reg_* -trace open_eth_desc_*"

# Kernel Tracing
# Enable DYNAMIC_DEBUG=Y in .config
# Then pass, -append 'earlycon dyndbg="file drivers/pci/* +plf" loglevel=10'

#SERIAL="-serial stdio -nographic -monitor none"
# With monitor 'ctrl+a c'
SERIAL="-serial mon:stdio -nographic"

#SMP="-smp cpus=4"
SMP="-accel tcg,thread=multi -smp cpus=4"

# Go big if running openadk + debug
#RAM="-m 1024"
RAM="-m 512"
#RAM="-m 128"
#RAM="-m 64"

IPRANGE=10.9.0

# https://wiki.qemu.org/Features/TCGPlugins
#PLUGIN="-plugin $QEMU/tests/plugin/libtracewatch.so,arg=store,arg=addr,arg=0x30007478,arg=addr_mask,arg=0xf000ffff,arg=tracepath,arg=-"

# Initrd not needed if we are using the rootfs partition
#INITRD="-initrd $INITRD_CPIO"

# Setup networking with the user mode IP tack, it doesn't appear to work for me.
#NETWORK="-net nic -netdev user,id=or1k,net=$IPRANGE.0/24,host=$IPRANGE.100,dhcpstart=$IPRANGE.50,hostfwd=tcp::2323-:23"

## Setup networking with a tap tunnel, this works.
#if ip addr show tap0 | grep -q "UP" && ip addr show tap0 | grep -q "$IPRANGE.100"; then
#  __NETWORK="-net nic -net tap,ifname=tap0,script=no,downscript=no"
#fi
#NETWORK=$__NETWORK

# Bios doesn't work on OpenRISC yet
#BIOS="-bios ${BAREBOX}.bin"
#KERNEL="-kernel $BAREBOX"
KERNEL="-kernel $LINUX"

MACHINE=${MACHINE:-virt}

if [ "$MACHINE" = "virt" ] ; then
  # Setup virt network using user mode
  # We can use: virtio-net-pci or virtio-net-device
  # pure virtio is a bit faster
  NETWORK=" -device virtio-net-pci,netdev=user -netdev user,id=user,net=10.9.0.1/24,host=10.9.0.100"
  NETWORK="$NETWORK,hostfwd=tcp::2222-:22"

  # Allow persistence on virt
  DRIVE="-device virtio-blk-device,drive=d0 -drive file=${DISK},id=d0,if=none,format=qcow2"
  # Make the drive our root device
  ROOT="-append 'rootwait -append root=/dev/vda2"
else
  # Setup ethoc network using user mode
  NETWORK=" -nic user,net=10.9.0.0/24,host=10.9.0.100,dns=10.9.0.3"
fi

#PERF="${PERF:-perf record}"
#PERF="perf stat -e instructions,branches,branch-misses "

rm -f trace.txt
run $PERF $QEMU/build/or1k-softmmu/qemu-system-or1k \
    -cpu or1200 \
    -machine $MACHINE \
    -no-reboot $KERNEL $BIOS \
    $PLUGIN \
    $INITRD $NETWORK $SERIAL $DRIVE $DEBUG $TRACE $SMP $RAM $ROOT "$@"
