#!/bin/bash

# quick wrapper for openrisc on or1ksim (golden reference)
OPENRISC_OS=$HOME/work/openrisc/or1k-utils
LINUX=$HOME/work/linux
OR1KSIM=$HOME/work/openrisc/build-or1ksim
IPRANGE=10.8.0

run() {
  echo "exec: $@"
  exec $@
}

# Networking requires a tap0 interface
# verbatim from litex-buildenv

START_NETWORK=${START_NETWORK:-N}

if [ "$START_NETWORK" == "Y" ] ; then
		echo "Using tun device for QEmu networking, (may need sudo)..."
		# Make the tap0 dev node exists
		if [ ! -e /dev/net/tap0 ]; then
			sudo true
			sudo mknod /dev/net/tap0 c 10 200
			sudo chown $(whoami) /dev/net/tap0
		fi

		# Check that the tap0 network interface exists
		if [ ! -e /sys/class/net/tap0 ]; then
			sudo true
			if sudo which openvpn > /dev/null; then
				sudo openvpn --mktun --dev tap0 --user $(whoami)
			elif sudo which tunctl > /dev/null; then
				sudo tunctl -t tap0 -u $(whoami)
			else
				echo "Unable to find tool to create tap0 device!"
				exit 1
			fi
		fi

		# Check the tap0 device if configure and up
		if sudo which ifconfig > /dev/null; then
			if ! ifconfig tap0 | grep -q "UP" || ! ifconfig tap0 | grep -q "$IPRANGE.100"; then
				sudo true
				sudo ifconfig tap0 $IPRANGE.100 netmask 255.255.255.0 up
			fi
		elif sudo which ip > /dev/null; then
			if ! ip addr show tap0 | grep -q "UP" || ! ip addr show tap0 | grep -q "$IPRANGE.100"; then
				sudo true
				sudo ip addr add $IPRANGE.100/24 dev tap0
				sudo ip link set dev tap0 up
			fi
		else
			echo "Unable to find tool to configure tap0 address"
			exit 1
		fi
fi

# Start sim in the background
run $OR1KSIM/sim -f $OPENRISC_OS/or1ksim.cfg $LINUX/vmlinux $@

