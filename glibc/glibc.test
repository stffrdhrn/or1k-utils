#!/bin/bash

# A test runner to be used with glibc.  From the glibc directory run:
#  glibc.test <subdir>
#
# This will run 'make check' with the correct arguments to run glibc
# tests as requested.  The SUBDIR argument is optional and will be used
# to limit tests to run only for the selected sub-directory.

DIR=`dirname $0`
DIR=`readlink -f $DIR`
source $DIR/glibc.config

if [ $# == 1 ] ; then
  subdir=$1; shift
fi

if [ "$CHROOT" ] ; then
  CHROOT="-chroot"
fi

TEST_WRAPPER="$DIR/qemu-or1k-libc${CHROOT}"
TEST_WRAPPER="$(readlink -f $TEST_WRAPPER)"

if [ "$SSH" ] ; then
  TEST_WRAPPER="$BUILDDIR/glibc/scripts/cross-test-ssh.sh"
  TEST_WRAPPER="$TEST_WRAPPER --timeoutfactor $TIMEOUTFACTOR $SSH"
fi

mkdir -p $BUILDDIR/log
TESTLOG="$BUILDDIR/log/test-$subdir-$(date -u +"%Y%m%d-%H%M%S").log"

start_time=`date -u +%s`

startup() {
  echo -n "# test start:    "; date -uIs
}

summary() {
  local file=$1
  echo
  echo    "# failures"
  for failure in `grep ^FAIL $file | cut -d' ' -f2`; do
    if ! grep -q "^$failure," $DIR/glibc.explained ; then
      echo FAIL $failure
    fi
  done
  echo
  echo -n "# test finish:   "; date -uIs
  echo -n "# test time(m):  "; expr `date -u +%s` / 60 - $start_time / 60
  echo    "# test for file: $file"
  echo    "# test wrapper:  $TEST_WRAPPER"
  echo
  echo    "# summary"
  cut -f1 -d: $file | sort | uniq -c
}

pushd $BUILDDIR/build-glibc
    if [ -z "$subdir" ] ; then
        startup > $TESTLOG
        (
          make -r PARALLELMFLAGS="-j4" \
            test-wrapper="$TEST_WRAPPER" check
        )
        summary tests.sum >> $TESTLOG
    else
        startup > $TESTLOG
        (
          make -r PARALLELMFLAGS="-j4" -C $BUILDDIR/glibc/$subdir \
            test-wrapper="$TEST_WRAPPER" objdir=`pwd` check
        )
        summary $subdir/subdir-tests.sum >> $TESTLOG
    fi
popd

echo "# results in file: $TESTLOG"
cat $TESTLOG

if [ "$MAILTO" ] ; then
  cat $TESTLOG | mail -s "Glibc $subdir test results $(date +"%Y-%m-%d-%H:%M")" $MAILTO
fi
