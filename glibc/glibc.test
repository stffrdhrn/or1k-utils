#!/bin/bash

# A test runner to be used with glibc.  From the glibc directory run:
#  glibc.test <target>
#
# This will run 'make check' with the correct arguments to run glibc
# tests as requested.  The SUBDIR argument is optional and will be used
# to limit tests to run only for the selected sub-directory.

DIR=`dirname $0`
DIR=`readlink -f $DIR`
source $DIR/glibc.config

mkdir -p $BUILDDIR/log

TEST_SUM=tests.sum
if [ $# == 1 ] ; then
  if [[ $1 == */* ]] ; then
    singletest=$1; shift
  else
    target=$1; shift
    TEST_SUM=$target/subdir-tests.sum
  fi
fi

if [ "$CHROOT" ] ; then
  CHROOT="-chroot"
fi

if [ "$PARALLEL" ] ; then
  PARALLEL="PARALLELMFLAGS=\"-j${PARALLEL}\""
else
  PARALLEL="PARALLELMFLAGS=\"-j2\""
fi

TEST_WRAPPER="$DIR/qemu-or1k-libc${CHROOT}"
TEST_WRAPPER="$(readlink -f $TEST_WRAPPER)"

if [ "$SSH" ] ; then
  TEST_WRAPPER="$BUILDDIR/glibc/scripts/cross-test-ssh.sh"
  TEST_WRAPPER="$TEST_WRAPPER --timeoutfactor $TIMEOUTFACTOR"
  #TEST_WRAPPER="$TEST_WRAPPER --ssh 'ssh -tt'"
  #TEST_WRAPPER="$TEST_WRAPPER --ssh 'ssh -tt -vvv -E /tmp/glibc.ssh.log'"
  TEST_WRAPPER="$TEST_WRAPPER $SSH"
fi

TESTLOG="$BUILDDIR/log/test-$target-$(date +"%Y%m%d-%H%M%S").log"

start_time=`date -u +%s`

startup() {
  echo -n "# test start:    "; date -Is
}

subject()
{
    local testlog=$1; shift
    local target=$1; shift

    local failures=`grep ^FAIL $testlog | wc -l`

    echo "Glibc $target test results $(date +"%Y-%m-%d-%H:%M") - $failures failure(s)"
}

function displaytime {
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  (( $D > 0 )) && printf '%d days ' $D
  (( $H > 0 )) && printf '%d hours ' $H
  (( $M > 0 )) && printf '%d minutes ' $M
  (( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
  printf '%d seconds\n' $S
}

summary() {
  local file=$1
  echo
# We used to just print explained failures, but now I want to know all
#  for failure in `grep ^FAIL $file | cut -d' ' -f2`; do
#    if ! grep -q "^$failure," $DIR/glibc.explained ; then
#      echo FAIL $failure
#    fi
#  done
  if [ ! -f $file ]; then
    echo  "FAIL Tests Aborted"
    echo  "FAIL Could not find file: $file"
    echo
    echo -n "# test duration: "; displaytime $(expr `date -u +%s` - $start_time)
    return
  fi

  echo    "# failures"
  grep ^FAIL $file
  echo
  echo -n "# test finish:   "; date -Is
  echo -n "# test duration: "; displaytime $(expr `date -u +%s` - $start_time)
  echo    "# test for file: $file"
  echo    "# test wrapper:  $TEST_WRAPPER"
  echo
  echo    "# summary"
  cut -f1 -d: $file | sort | uniq -c
}

pushd $BUILDDIR/build-glibc
    if [ "$singletest" ] ; then
        echo "Running single test: $singletest ..."
        echo running: make test-wrapper=\"$TEST_WRAPPER\" test t=$singletest
        make test-wrapper="$TEST_WRAPPER" test t=$singletest
        exit $?
    elif [ -d "$BUILDDIR/glibc/$target" ] ; then
        # Run all tests in a directly
        echo "Running directory test: '$target' ..."
        startup > $TESTLOG
        (
          make -r $PARALLEL -C $BUILDDIR/glibc/$target \
            test-wrapper="$TEST_WRAPPER" objdir=`pwd` check
        )
        summary $TEST_SUM >> $TESTLOG
    elif [ "$target" ] ; then
        # Run a specific test target
        echo "Running targeted test: $target ..."
        echo "Note: use TEST_DIRECT=file to skip forking"
        startup > $TESTLOG
        (
          echo running: make -r $PARALLEL test-wrapper=\"$TEST_WRAPPER\" $target
          make -r $PARALLEL test-wrapper="$TEST_WRAPPER" $target
        )
        summary ${target}.test-result >> $TESTLOG
    else
        echo "Don't know how to run $target ... Exiting."
        exit 1
    fi
popd

echo "# results in file: $TESTLOG"
cat $TESTLOG

if [ "$MAILTO" ] ; then
  cat $TESTLOG | mail -s "$(subject $TESTLOG $target)" $MAILTO
fi
