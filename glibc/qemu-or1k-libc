#!/bin/bash

# Wrapper for openrisc qemu user space emulator to help run libc binaries.
# By editing this script we can:
#
#  - change between glibc and musl
#  - setup gdb debugging
#  - do instruction level tracing
#  - enable glibc debugging
#  - enable glibc bind now to skip lazy symbol resolution
#  - change qemu ram size (not yet tested)
#  - change qemu network settings (not yet tested)
#
# This script is also used to run the glibc testsuite.  I.e.
#
#  make check test-wrapper=$HOME/work/openrisc/or1k-utils/glibc/qemu-or1k-libc
#
# glibc doesn't use dejagnu so this wrapper script can be used.  For things
# like gcc testing we use dejagnu which uses or1k-utils/site.exp which points to
# or1k-utils/boards/or1k-linux-qemu.exp

SCRIPT_PATH=$0

trace() {
  if [ -n "${TRACE}${DEBUG}" ] ; then
    echo "$(date -u +"%F %T") TRACE $@"
  fi
}

# TRACE=1

trace "executing:      $SCRIPT_PATH"
trace "with arguments: $@"
trace "from directory: $PWD"
trace

DIR=`dirname $0`

source $DIR/glibc.config

run() {
  trace "exec: $@"
  exec $@
}

#### MAIN ####

# glibc will pass in args like "env LD=xyz VAR=hello ./program
# we parse those out here to a form accepted by qemu.

ENV_ARGS=
CMD_AND_ARGS=
CMD=

while [[ $# -gt 0 ]] ; do

  case $1 in
    cp)
      # CP commands need to run on this host, but may want to copy files out
      # of sysroot so check if that is needed.
      shift  ; # remove copy
      from=$1; shift 
      to=$1  ; shift
      if [ -f "$SYSROOTDIR$from" ] ; then
        from="$SYSROOTDIR$from"
      fi
      run "cp $from $to"
      ;;
    env)
      shift # remove env
      while [[ $1 == *=* ]] ; do
        ENV_ARGS="$ENV_ARGS -E $1" ; shift
      done
      ;;
    *)
      if [ -z $CMD ] ; then
        CMD=$1
      fi
      CMD_AND_ARGS="$CMD_AND_ARGS $1" ; shift
      ;;
  esac

done

# Debug, connect gdb with:
#
#  or1k-smh-linux-gnu-gdb $PROGRAM  -ex 'target remote localhost:10001'
#
if [ -n "$DEBUG" ] ; then
  BIN=`readlink -f $CMD`
  echo "Connect with: or1k-smh-linux-gnu-gdb $BIN -ex 'target remote localhost:10001'"
  DEBUG="-g 10001"

fi

if [ -n "$STRACE" ] ; then
  QEMU_STRACE="-strace"
fi

if [ -n "$TRACE" ] ; then
  QEMU_TRACE="-D trace.txt -d in_asm,exec,int,cpu,op_opt"
#QEMU_TRACE="-trace open_eth_reg_* -trace open_eth_desc_*"
fi

if [ -n "${TRACE}${DEBUG}" ] ; then
  # env vars used for glib tests
  # TEST_DIRECT disables forking and directs output to the provided file
  TEST_DIRECT="-E TEST_DIRECT=tst-output.txt"

  # TEST_COREDUPS enabled core dumps
  TEST_COREDUMPS="-E TEST_COREDUMPS=1"
fi

# The glibc runtime linker debugging
#LD_DEBUG="-E LD_DEBUG=all"
#LD_BIND_NOW="-E LD_BIND_NOW=1"

# Control timeout scale for glibc test framework, since we are slow
TIMEOUTFACTOR=" -E TIMEOUTFACTOR=$TIMEOUTFACTOR"

rm -f trace.txt
run $QEMU/build/or1k-linux-user/qemu-or1k -L $SYSROOTDIR \
    $QEMU_TRACE $QEMU_STRACE $DEBUG $LD_DEBUG $LD_BIND_NOW \
    $TEST_COREDUMPS $TEST_DIRECT \
    $ENV_ARGS $TIMEOUTFACTOR $CMD_AND_ARGS
