#!/bin/bash

## For debug
# set -x
## Fail fast
# set -e

# Build steps from https://pmc.polytechnique.fr/pagesperso/dc/arm-en.html
# Also:
#  - https://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/
#
# Notes:
#  - binutils works ok
#  - linux from my git repo installed to sysroot/usr

# This directories we will use!

# BUILDDIR where evertying lives
#  - /gcc          - my gcc git repo
#  - /binutils-gdb - my binutils git repo
#  - /glibc        - my glibc git repo
#  - /build-*      - build temporary files
BUILDDIR=${BUILDDIR:-$HOME/work/gnu-toolchain}
# Source locations, which we can override
GCC_SRC=${GCC_SRC:-$BUILDDIR/gcc}
BINUTILS_SRC=${BINUTILS_SRC:-$BUILDDIR/binutils-gdb}
GLIBC_SRC=${GLIBC_SRC:-$BUILDDIR/glibc}
# Linux for headers installed into sysroot
LINUX_SRC=${LINUX_SRC:-$HOME/work/linux}

for src in $GCC_SRC $BINUTILS_SRC $GLIBC_SRC $LINUX_SRC; do
  if [ ! -d $src ]; then
    echo "ERROR: Missing source dir for: $src"
    echo "Make sure you have git cloned and tarbals extracted for:"
    echo "  gcc:      $GCC_SRC"
    echo "  binutils: $BINUTILS_SRC"
    echo "  glibc:    $GLIBC_SRC"
    echo "  linux:    $LINUX_SRC"
    exit 1
  fi
done

# QEMU location to qemu binaries used for testing
QEMU=$HOME/work/openrisc/qemu

# Where busybox lives
OR1K_UTILS=$HOME/work/openrisc/or1k-utils

# busybox for chroot environment
BUSYBOX=$OR1K_UTILS/initramfs/bin/busybox

# Cross compile toolchain
#  - target (arch)-(vendor)-(os)-(abi)
#  - arch   - openrisc or1k
#  - vendor - me stafford mitchell horne (ignored by everything)
#  - os     - um linux of course
#  - abi    - gnu for glibc
CROSS=${CROSS:-or1k-smh-linux-gnu}
#CROSS=or1k-smhfpu-linux-gnu

# where stuff is installed to (prefix vs sysroot?)
INSTALLDIR=${INSTALLDIR:-$BUILDDIR/local}
SYSROOTDIR=$INSTALLDIR/$CROSS/sysroot

# Argument for make -j${THREADS}
THREADS=$(nproc)

# Optional for test notifications
MAILTO=${MAILTO:-shorne@gmail.com}
if [ "$NOTIFY" == 'n' ] ; then
  MAILTO=
fi

# Multiplied for how long to wait for hung tests to fail (not sure of scale)
TIMEOUTFACTOR=${TIMEOUTFACTOR:-10}

# Bootstrap the environment for our scripts
mkdir -p $INSTALLDIR
mkdir -p $SYSROOTDIR

export PATH=$INSTALLDIR/bin:$PATH

# Clean up compiler flags
#export CFLAGS="-g -Og"
export CFLAGS="-O2"
export CXXFLAGS="-O2"
export LDFLAGS=""

# Just run glibc.build
# it will run:
# 0 ../glibc.config               - this file sourced by others
# 1 ../glibc.build.binutils
# 2 ../glibc.build.linux-headers
# 3 ../glibc.build.gcc1
# 4 ../glibc.build.libc-headers   - glibc headers/then glibc
# 5 ../glibc.build.gcc1.5
# 6 ../glibc.build.libc-final     - glibc headers/then glibc
# 7 ../glibc.build.gcc2

